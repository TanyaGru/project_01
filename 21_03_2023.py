# -*- coding: utf-8 -*-
"""21_03_2023.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QK-xYa5Q5MnOBYNYPkZnhQASxI8PXmbQ
"""

# МАСТЕР
from datetime import datetime
arr = [[4,6,2,1,9,63,-134,566],[-52, 56, 30, 29, -54, 0, -110],[42, 54, 65, 87, 0],[5]]

def insertion(data):
  for i in range(len(data)):
    j = i - 1
    key = data[i]
    while data[j] > key and j >= 0:
      data[j + 1] = data[j]
      j -= 1
    data[j + 1] = key
  return data

def bubble (data):
  n = len(data)
  for i in range (n-1):
    for j in range (n-i-1):
      if data[j] > data[j+1]:
        data[j], data[j+1] = data[j+1], data[j]
  return data

def vibor(data):
  n = len(data)
  i = 0
  while i < n-1:
    m = i
    j = i + 1
    while j < n:
      if data[j]<data[m]:
        m = j
      j += 1
    data[i], data[m] = data[m], data[i]
    i += 1
  return data

def default(data):
  for data in arr:
    data = sorted(data)
    return data

def minimum(arr):
  print ("МИНИМАЛЬНЫЕ ЗНАЧЕНИЯ")
  print ("Метод сортировки встроенный")
  start_time = datetime.now()
  for data in arr:
   data = sorted(data)
   print ("Минимальное значение из массива:", data, min(data))
  end_time = datetime.now()
  print ('Продолжительность: {}'.format(end_time - start_time))
  print ("Метод сортировки вставкой")
  start_time = datetime.now()
  for data in arr:
    print ("Минимальное значение из массива:", data, insertion(data)[0])
  end_time = datetime.now()
  print ('Продолжительность: {}'.format(end_time - start_time))
  print ("Метод сортировки пузырьком")
  start_time = datetime.now()
  for data in arr:
    print ("Минимальное значение из массива:", data, bubble(data)[0])
  end_time = datetime.now()
  print ('Продолжительность: {}'.format(end_time - start_time))
  print ("Метод сортировки выбором")
  start_time = datetime.now()
  for data in arr:
    print ("Минимальное значение из массива:", data, vibor(data)[0])
  end_time = datetime.now()
  print ('Продолжительность: {}'.format(end_time - start_time))

def maximum(arr):
  print ("МАКСИМАЛЬНЫЕ ЗНАЧЕНИЯ")
  print ("Метод сортировки встроенный")
  start_time = datetime.now()
  for data in arr:
   data = sorted(data)
   print ("Максимальное значение из массива:", data, max(data))
  end_time = datetime.now()
  print ('Продолжительность: {}'.format(end_time - start_time))
  print ("Метод сортировки вставкой")
  start_time = datetime.now()
  for data in arr:
    print ("Максимальное значение из массива:", data, insertion(data)[len(data)-1])
  end_time = datetime.now()
  print ('Продолжительность: {}'.format(end_time - start_time))
  print ("Метод сортировки пузырьком")
  start_time = datetime.now()
  for data in arr:
    print ("Максимальное значение из массива:", data, bubble(data)[len(data)-1])
  end_time = datetime.now()
  print ('Продолжительность: {}'.format(end_time - start_time))
  print ("Метод сортировки выбором")
  start_time = datetime.now()
  for data in arr:
    print ("Максимальное значение из массива:", data, vibor(data)[len(data)-1])
  end_time = datetime.now()
  print ('Продолжительность: {}'.format(end_time - start_time))

def main():
 print (minimum(arr))
 print (maximum(arr))

print (main())

salary = float(input("Введи ЗП"))
expenses = float(input("Введи Расходы"))
months = [1,2,3,4,5,6,7,8,9,10,11,12]
tempexp = expenses
tempsal = salary
if salary <= expenses:
  print ("Поданы не правильные данные в программу")
else:
  for i in months:
    print("Сейчас месяц ", i)
    if i != 1:
      salary = salary *1.05
      tempsal = tempsal + salary
      print ("Зарплата: ", tempsal)
      tempexp = expenses * i
      print ("Расходы: ", tempexp )
    else:
      print ("Первый месяц без %")
      print (salary, expenses)

live = abs(tempsal - tempexp)
print ("Сотрудник накопит", round(live,2), "рублей")

arr = [-3,2,4,0,5]
k = 9
result = []

for x in arr:
  for y in arr:
    if x+y == k:
      result.append([x,y])

print(result)

arr = [-3,2,4,0,5]
k = 4
result = []

low = 0
high = len(arr)-1

while low < high:
    sum = arr[low] + arr[high]
    if sum == k:
        result.append([arr[low], arr[high]])
    if sum < k:
        low += 1
    else:
        high -= 1

print(result)

# КРИВОЙ КОД

# Бинарный поиск
def binary_search(arr, x):
  print ('Тест1')
  low = 0
  high = len(arr)-1
  index = -1
  while (low <= high) and (index == -1):
    mid = (low+high)//2
    if arr[mid] == x:
      print ('Тест2')
      index = mid
      print(index)
    else:
      if x < arr[mid]:
        low = mid - 1
      else:
        low = mid + 1
    return index

# Экспоненциальный поиск
def exponential_serch(arr, x):
  if arr[0] == x:
    return 0
  index = 1
  while index < len(arr) and arr[index] <= x:
    index = index * 2
  return binary_search(arr[:min(index, len(arr))], x)

# Тестовый массив
arr = [3,4,5,6,7,8,9]
x = int(input('Введи цифру: '))

# Вызываем функцию экспоненциального поиска
print ("Индекс искомого элемента: ", (exponential_serch(arr,x)))

# НОРМАЛЬНЫЙ
# Бинарный поиск
def binary_search(arr, x):
    low = 0
    high = len(arr)-1
    index = -1
    while (low <= high) and (index == -1):
        mid = (low+high) // 2
        if arr[mid] == x:
            index = mid
        else:
            if x < arr[mid]:
                low = mid -1
            else:
                low = mid +1
    return index

# Экспоненциальный поиск
def exponential_search(arr, x):
    if arr[0] == x:
        return 0
    index = 1
    while index < len(arr) and arr[index] <= x:
        index = index * 2
    return binary_search( arr[:min(index, len(arr))], x)



# Тестовый массив
arr = [3,4,5,6,7,8,9]
x = int(input('Введи цифру: '))


 
# Вызов функции
print("Индекс искомого элемента: ",(exponential_search(arr,x)))

import math
from random import randint

def JumpSearh(arr,value):
  length = len(arr)
  jump = int(math.sqrt(length))
  left = 0
  rigth = 0
  while left < length and arr[left] < value:
    rigth = min(length - 1, left + jump)
    if arr[left] <= value and arr[rigth] >= value:
      break
    left += jump
  if left >= length or arr[left] > value:
    return -1
  rigth = min(length-1, rigth)
  i = left
  while i < rigth and arr[i] <= value:
    if arr[i] == value:
      return i
    i +=1
  return -1

#Тестовый массив
testarr = []
for i in range (10):
  testarr.append(randint(1,50))
testarr.sort()
print(testarr)

value = int(input("Введи число: "))


# Вызов функции
if JumpSearh(testarr, value) != -1:
  print ("Элемент найден под индексом ", JumpSearh(testarr,x))
else:
  print ("Элемент отсутствует в списке")

import math
from random import randint

def JumpSearh(arr,value):
  length = len(arr)
  jump = int(math.sqrt(length))
  left = 0
  rigth = 0
  while left < length and arr[left] <= value:
    rigth = min(length - 1, left + jump)
    if arr[left] <= value and arr[rigth] >= value:
      break
    left += jump
  if left >= length or arr[left] > value:
    return -1
  rigth = min(length-1, rigth)
  i = left
  while i <= rigth and arr[i] <= value:
    if arr[i] == value:
      return i
    i +=1
  return -1

#Тестовый массив
testarr = [3, 5, 8, 13, 18, 32, 38, 38, 40, 45]
#for i in range (10):
 # testarr.append(randint(1,50))
#testarr.sort()
#print(testarr)

value = int(input("Введи число: "))


# Вызов функции
if JumpSearh(testarr, value) != -1:
  print ("Элемент найден под индексом ", JumpSearh(testarr,value))
else:
  print ("Элемент отсутствует в списке")

def InterpolationSearch(arr, value):
  low = 0
  high = (len(arr)-1)
  while low <= high and value >= arr[low] and value <= arr[high]:
    index = low + int(((float(high-low) / (arr[high] - arr[low])) * (value - arr[low])))
    if arr[index] == value:
      return index
    if arr[index] < value:
      low = index + 1
    else:
      high = index - 1
  return -1


#Тестовый массив
testarr = [3, 5, 8, 13, 18, 32, 38, 38, 40, 45]
#for i in range (10):
 # testarr.append(randint(1,50))
#testarr.sort()
#print(testarr)

value = int(input("Введи число: "))


# Вызов функции
if InterpolationSearch(testarr, value) != -1:
  print ("Элемент найден под индексом ", InterpolationSearch(testarr,value))
else:
  print ("Элемент отсутствует в списке")

def factorial_iterative (k):
    factorial = 1
    if k < 0:
        print("Нельзя вычислять факториал для отрицательных чисел")
    else:
        for i in range (1, k + 1):
            factorial = factorial*i
        print(f"Факториал числа {k} это {factorial}")
factorial_iterative(5)

def factotial_rec(k):
  if k == 1:
    return k
  else:
    return k*factotial_rec(k-1)

factotial_rec(7)

"""Тестовая папка 1"""

import os
def get_paths(path='.'):
  for name in os.listdir(path):
    abs_path = os.path.abspath(os.path.join(path,name))

    yield abs_path
    
    if os.path.isdir(abs_path) is True:
      yield from get_paths(abs_path)

for i in get_paths("Тестовая папка"):
  print(i)

import os
def get_paths(path='.'):
  for name in os.listdir(path):
    abs_path = os.path.abspath(os.path.join(path,name))
    if os.path.isfile(abs_path) is True:
      yield abs_path
    
    elif os.path.isdir(abs_path) is True:
      yield from get_paths(abs_path)

for i in get_paths("Тестовая папка"):
  print(i)